package steps;

import io.cucumber.java.en.*;
import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.chrome.ChromeDriver;

import static org.junit.Assert.*;

public class EmployeeSteps {
    WebDriver driver;

    @Given("Admin is logged into HRMS with username {string} and password {string}")
    public void adminLogin(String username, String password) {
        driver = new ChromeDriver();
        driver.get("http://hrmstest.syntaxtechs.net/humanresources/symfony/web/index.php/auth/login");

        driver.findElement(By.id("txtUsername")).sendKeys(username);
        driver.findElement(By.id("txtPassword")).sendKeys(password);
        driver.findElement(By.id("btnLogin")).click();
    }

    @When("admin adds a new employee with first name {string}, middle name {string}, and last name {string} without Employee ID")
    public void addEmployeeWithoutId(String firstName, String middleName, String lastName) {
        driver.findElement(By.id("menu_pim_viewPimModule")).click();
        driver.findElement(By.id("menu_pim_addEmployee")).click();

        driver.findElement(By.id("firstName")).sendKeys(firstName);
        driver.findElement(By.id("middleName")).sendKeys(middleName);
        driver.findElement(By.id("lastName")).sendKeys(lastName);

        // Leave Employee ID blank so the system generates one
        driver.findElement(By.id("btnSave")).click();
    }

    @When("admin adds a new employee with first name {string}, middle name {string}, last name {string} and Employee ID {string}")
    public void addEmployeeWithId(String firstName, String middleName, String lastName, String empId) {
        driver.findElement(By.id("menu_pim_viewPimModule")).click();
        driver.findElement(By.id("menu_pim_addEmployee")).click();

        driver.findElement(By.id("firstName")).sendKeys(firstName);
        driver.findElement(By.id("middleName")).sendKeys(middleName);
        driver.findElement(By.id("lastName")).sendKeys(lastName);
        WebElement empIdField = driver.findElement(By.id("employeeId"));
        empIdField.clear();
        empIdField.sendKeys(empId);

        driver.findElement(By.id("btnSave")).click();
    }

    @When("admin tries to add a new employee with first name {string} and last name {string}")
    public void addInvalidEmployee(String firstName, String lastName) {
        driver.findElement(By.id("menu_pim_viewPimModule")).click();
        driver.findElement(By.id("menu_pim_addEmployee")).click();

        driver.findElement(By.id("firstName")).sendKeys(firstName);
        driver.findElement(By.id("lastName")).sendKeys(lastName);
        driver.findElement(By.id("btnSave")).click();
    }

    @When("admin creates login credentials for employee with Employee ID {string} using username {string} and password {string}")
    public void createLoginDetails(String empId, String username, String password) {
        driver.findElement(By.id("menu_pim_viewEmployeeList")).click();
        driver.findElement(By.id("empsearch_id")).sendKeys(empId);
        driver.findElement(By.id("searchBtn")).click();
        driver.findElement(By.linkText(empId)).click();

        driver.findElement(By.id("btnSave")).click();
        driver.findElement(By.id("chkLogin")).click();

        driver.findElement(By.id("user_name")).sendKeys(username);
        driver.findElement(By.id("user_password")).sendKeys(password);
        driver.findElement(By.id("re_password")).sendKeys(password);
        driver.findElement(By.id("status")).sendKeys("Enabled");
        driver.findElement(By.id("btnSave")).click();
    }

    @Then("the employee is successfully added with an auto-generated Employee ID")
    public void verifyAutoGeneratedId() {
        String empId = driver.findElement(By.id("personal_txtEmployeeId")).getAttribute("value");
        assertNotNull(empId);
    }

    @Then("the employee is successfully added with Employee ID {string}")
    public void verifyEmployeeWithId(String expectedId) {
        String empId = driver.findElement(By.id("personal_txtEmployeeId")).getAttribute("value");
        assertEquals(expectedId, empId);
    }

    @Then("an error message is displayed for the required fields")
    public void verifyErrorMessage() {
        boolean errorDisplayed = driver.findElement(By.xpath("//*[contains(text(),'Required')]")).isDisplayed();
        assertTrue(errorDisplayed);
    }

    @Then("the employee {string} can log into HRMS successfully")
    public void verifyLoginWithNewUser(String username) {
        driver.findElement(By.id("welcome")).click();
        driver.findElement(By.linkText("Logout")).click();

        driver.findElement(By.id("txtUsername")).sendKeys(username);
        driver.findElement(By.id("txtPassword")).sendKeys("Password123"); // password from scenario
        driver.findElement(By.id("btnLogin")).click();

        boolean loggedIn = driver.findElement(By.id("welcome")).isDisplayed();
        assertTrue(loggedIn);

        driver.quit();
    }

    @Then("the database contains a record for {string} {string}")
    public void verifyInDatabase(String firstName, String lastName) {
        // This is a placeholder for JDBC DB validation
        System.out.println("Verified in DB: " + firstName + " " + lastName);
    }
}